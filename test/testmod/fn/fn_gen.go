// This file is generated by tools, DO NOT EDIT.
package fn
import (
	"encoding/json"
	"fmt"
)
type RunPythonParameters struct {
	
	// the Python code you want to run
	Code string `json:"code" yaml:"code"`
	
}
type WebSearchParameters struct {
	
	// the search content, keep it simple, no longer than 36 characters
	Query string `json:"query" yaml:"query"`
	
}


func (r *RunPythonParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

func (r *WebSearchParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

type FunctionExecutorInterface interface {
	
	// Python code execution
	RunPython(params *RunPythonParameters) (string, error)
	
	// use online search engine to search
	WebSearch(params *WebSearchParameters) (string, error)
	
}
type FunctionCaller struct {
	executor FunctionExecutorInterface
}
func NewFunctionCaller(executor FunctionExecutorInterface) *FunctionCaller {
	return &FunctionCaller{
		executor: executor,
	}
}
func (f *FunctionCaller) Call(fnName string, paramJSON string) (string, error) {
	switch fnName {
	
	case "RunPython":
		var params RunPythonParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse RunPython parameters: %w", err)
		}
		return f.executor.RunPython(&params)
		
	case "WebSearch":
		var params WebSearchParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse WebSearch parameters: %w", err)
		}
		return f.executor.WebSearch(&params)
		
	default:
		return "", fmt.Errorf("unknown function %s", fnName)
	}
}

