// This file is generated by tools, DO NOT EDIT.
package fn

import (
	"encoding/json"
	"fmt"
)

type RunPythonParameters struct {
	
    // the Python code you want to run
	Code string `json:"code" yaml:"code"`
	
}

type SetParameters struct {
	
    // the key of the value
	Key string `json:"key" yaml:"key"`
	
    // 
	Value any `json:"value" yaml:"value"`
	
}


type SetListParameters struct {
	
    // the key of the value
	Key string `json:"key" yaml:"key"`
	
    // 
	Value []any `json:"value" yaml:"value"`
	
}

type WebSearchParameters struct {
	
    // the search content, keep it simple, no longer than 36 characters
	Query string `json:"query" yaml:"query"`
	
}

type DatasetsItem struct {
	
    // the x value
    // test multiple lines description
	X float64 `json:"x" yaml:"x"`
	
    // the y value
	Y float64 `json:"y" yaml:"y"`
	
}

type DataItem struct {
	
    // 
	Datasets [][]DatasetsItem `json:"datasets" yaml:"datasets"`
	
}

type PlotMatrixParameters struct {
	
    // 
	Data []DataItem `json:"data" yaml:"data"`
	
}

func (r *RunPythonParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

func (r *SetParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

func (r *SetListParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

func (r *WebSearchParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

func (r *PlotMatrixParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

type FunctionExecutorInterface interface {
	
    // Python code execution
	RunPython(params *RunPythonParameters) (string, error)
	
    // 
	Set(params *SetParameters) (string, error)
	
    // 
	SetList(params *SetListParameters) (string, error)
	
    // use online search engine to search
	WebSearch(params *WebSearchParameters) (string, error)
	
    // plot a matrix
    // test multiple lines description
	PlotMatrix(params *PlotMatrixParameters) (string, error)
	
}
type FunctionCaller struct {
	executor FunctionExecutorInterface
}

func NewFunctionCaller(executor FunctionExecutorInterface) *FunctionCaller {
	return &FunctionCaller{
		executor: executor,
	}
}

func (f *FunctionCaller) Call(fnName string, paramJSON string) (string, error) {
	switch fnName {
	
	case "RunPython":
		var params RunPythonParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse RunPython parameters: %w", err)
		}
		return f.executor.RunPython(&params)
		
	case "Set":
		var params SetParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse Set parameters: %w", err)
		}
		return f.executor.Set(&params)
		
	case "SetList":
		var params SetListParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse SetList parameters: %w", err)
		}
		return f.executor.SetList(&params)
		
	case "WebSearch":
		var params WebSearchParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse WebSearch parameters: %w", err)
		}
		return f.executor.WebSearch(&params)
		
	case "PlotMatrix":
		var params PlotMatrixParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse PlotMatrix parameters: %w", err)
		}
		return f.executor.PlotMatrix(&params)
		
	default:
		return "", fmt.Errorf("unknown function %s", fnName)
	}
}
