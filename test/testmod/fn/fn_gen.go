// This file is generated by tools, DO NOT EDIT.
package fn
import (
	"encoding/json"
	"fmt"
)
const FunctionsDef = `[
  {
    "description": "Python code execution",
    "name": "RunPython",
    "parameters": {
      "properties": {
        "code": {
          "description": "the Python code you want to run",
          "type": "string"
        }
      },
      "required": [
        "code"
      ],
      "type": "object"
    }
  },
  {
    "description": "use online search engine to search",
    "name": "WebSearch",
    "parameters": {
      "properties": {
        "query": {
          "description": "the search content, keep it simple, no longer than 36 characters",
          "type": "string"
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    }
  },
  {
    "description": "plot a matrix",
    "name": "PlotMatrix",
    "parameters": {
      "properties": {
        "data": {
          "items": {
            "properties": {
              "datasets": {
                "items": {
                  "items": {
                    "properties": {
                      "x": {
                        "description": "the x value",
                        "type": "number"
                      },
                      "y": {
                        "description": "the y value",
                        "type": "number"
                      }
                    },
                    "required": [
                      "x",
                      "y"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    }
  }
]`

type RunPythonParameters struct {
	
	// the Python code you want to run
	Code string `json:"code" yaml:"code"`
	
}

type WebSearchParameters struct {
	
	// the search content, keep it simple, no longer than 36 characters
	Query string `json:"query" yaml:"query"`
	
}

type DatasetsItem struct {
	
	// the x value
	X float64 `json:"x" yaml:"x"`
	
	// the y value
	Y float64 `json:"y" yaml:"y"`
	
}

type DataItem struct {
	
	// 
	Datasets [][]DatasetsItem `json:"datasets" yaml:"datasets"`
	
}

type PlotMatrixParameters struct {
	
	// 
	Data []DataItem `json:"data" yaml:"data"`
	
}


func (r *RunPythonParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

func (r *WebSearchParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

func (r *PlotMatrixParameters) Parse(raw string) error {
	return json.Unmarshal([]byte(raw), r)
}

type FunctionExecutorInterface interface {
	
	// Python code execution
	RunPython(params *RunPythonParameters) (string, error)
	
	// use online search engine to search
	WebSearch(params *WebSearchParameters) (string, error)
	
	// plot a matrix
	PlotMatrix(params *PlotMatrixParameters) (string, error)
	
}
type FunctionCaller struct {
	executor FunctionExecutorInterface
}
func NewFunctionCaller(executor FunctionExecutorInterface) *FunctionCaller {
	return &FunctionCaller{
		executor: executor,
	}
}
func (f *FunctionCaller) Call(fnName string, paramJSON string) (string, error) {
	switch fnName {
	
	case "RunPython":
		var params RunPythonParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse RunPython parameters: %w", err)
		}
		return f.executor.RunPython(&params)
		
	case "WebSearch":
		var params WebSearchParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse WebSearch parameters: %w", err)
		}
		return f.executor.WebSearch(&params)
		
	case "PlotMatrix":
		var params PlotMatrixParameters
		if err := params.Parse(paramJSON); err != nil {
			return "", fmt.Errorf("failed to parse PlotMatrix parameters: %w", err)
		}
		return f.executor.PlotMatrix(&params)
		
	default:
		return "", fmt.Errorf("unknown function %s", fnName)
	}
}

